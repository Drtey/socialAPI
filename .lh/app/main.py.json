{
    "sourceFile": "app/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 227,
            "patches": [
                {
                    "date": 1663341132803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1663341166233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psy\r\n+    conn = psycopg2.connect(host, database, user, password)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341229427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host, database, user, password)\r\n+    conn = psycopg2.connect(host = 'localhost', database='postsgres', user='postsgres, password)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341241515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host = 'localhost', database='postsgres', user='postsgres, password)\r\n+    conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3')\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341279504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from fastapi.params import Body\r\n from pydantic import BaseModel\r\n from random import randrange\r\n import psycopg2\r\n+from psycopg2.extras import RealDictCursor\r\n \r\n app = FastAPI()\r\n \r\n \r\n"
                },
                {
                    "date": 1663341333639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3')\r\n+    conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341345999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n \r\n \r\n try: \r\n     conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+    cursor = conn.cursor()\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341370347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n \r\n try: \r\n     conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n+    print(\"Database connection was succesfull!\")\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341385600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n try: \r\n     conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n+except Exception as error:\r\n+    print(error)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341426403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,10 @@\n     conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n-    print(error)\r\n+    print(\"Connecting from database failed\")\r\n+    print(\"Error: \", error)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663341605853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+    conn = psycopg2.connect(host='localhost', database='postsgres', port='3306', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n     print(\"Connecting from database failed\")\r\n"
                },
                {
                    "date": 1663341629522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postsgres', port='3306', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+    conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n     print(\"Connecting from database failed\")\r\n"
                },
                {
                    "date": 1663341636587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postsgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+    conn = psycopg2.connect(host='localhost', database='postgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n     print(\"Connecting from database failed\")\r\n"
                },
                {
                    "date": 1663344100741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postgres', user='postsgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+    conn = psycopg2.connect(host='localhost', database='postgres', user='postgres', password='trucktor3'cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n     print(\"Connecting from database failed\")\r\n"
                },
                {
                    "date": 1663344109028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postgres', user='postgres', password='trucktor3'cursor_factory=RealDictCursor)\r\n+    conn = psycopg2.connect(host='localhost', database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n     print(\"Connecting from database failed\")\r\n"
                },
                {
                    "date": 1663344134184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     rating: Optional[int] = None\r\n \r\n \r\n try: \r\n-    conn = psycopg2.connect(host='localhost', database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+    conn = psycopg2.connect(host='localhost', port=3306, database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n     print(\"Database connection was succesfull!\")\r\n except Exception as error:\r\n     print(\"Connecting from database failed\")\r\n"
                },
                {
                    "date": 1663344476929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     content: str\r\n     published: bool = True\r\n     rating: Optional[int] = None\r\n \r\n+while True:\r\n \r\n try: \r\n     conn = psycopg2.connect(host='localhost', port=3306, database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n     cursor = conn.cursor()\r\n"
                },
                {
                    "date": 1663344484524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,15 @@\n     rating: Optional[int] = None\r\n \r\n while True:\r\n \r\n-try: \r\n-    conn = psycopg2.connect(host='localhost', port=3306, database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n-    cursor = conn.cursor()\r\n-    print(\"Database connection was succesfull!\")\r\n-except Exception as error:\r\n-    print(\"Connecting from database failed\")\r\n-    print(\"Error: \", error)\r\n+    try: \r\n+        conn = psycopg2.connect(host='localhost', port=3306, database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+        cursor = conn.cursor()\r\n+        print(\"Database connection was succesfull!\")\r\n+    except Exception as error:\r\n+        print(\"Connecting from database failed\")\r\n+        print(\"Error: \", error)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663344494598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n     try: \r\n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n         cursor = conn.cursor()\r\n         print(\"Database connection was succesfull!\")\r\n+        break\r\n     except Exception as error:\r\n         print(\"Connecting from database failed\")\r\n         print(\"Error: \", error)\r\n \r\n"
                },
                {
                    "date": 1663344507304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n         break\r\n     except Exception as error:\r\n         print(\"Connecting from database failed\")\r\n         print(\"Error: \", error)\r\n+        time.sleep(2)\r\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n"
                },
                {
                    "date": 1663344513196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from pydantic import BaseModel\r\n from random import randrange\r\n import psycopg2\r\n from psycopg2.extras import RealDictCursor\r\n+import time\r\n \r\n app = FastAPI()\r\n \r\n \r\n"
                },
                {
                    "date": 1663344523465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n \r\n while True:\r\n \r\n     try: \r\n-        conn = psycopg2.connect(host='localhost', port=3306, database='postgres', user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+        conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \r\n+                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n         cursor = conn.cursor()\r\n         print(\"Database connection was succesfull!\")\r\n         break\r\n     except Exception as error:\r\n"
                },
                {
                    "date": 1663344528758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n while True:\r\n \r\n     try: \r\n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \r\n-                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+                                user='postgres', password='trucktr3', cursor_factory=RealDictCursor)\r\n         cursor = conn.cursor()\r\n         print(\"Database connection was succesfull!\")\r\n         break\r\n     except Exception as error:\r\n"
                },
                {
                    "date": 1663344533958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n while True:\r\n \r\n     try: \r\n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \r\n-                                user='postgres', password='trucktr3', cursor_factory=RealDictCursor)\r\n+                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n         cursor = conn.cursor()\r\n         print(\"Database connection was succesfull!\")\r\n         break\r\n     except Exception as error:\r\n"
                },
                {
                    "date": 1663345082391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n while True:\r\n \r\n     try: \r\n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \r\n-                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n+                                user='postgres', password='truckto r3', cursor_factory=RealDictCursor)\r\n         cursor = conn.cursor()\r\n         print(\"Database connection was succesfull!\")\r\n         break\r\n     except Exception as error:\r\n@@ -52,8 +52,9 @@\n \r\n \r\n @app.get(\"/posts\")\r\n async def get_posts():\r\n+    cursor.execute(\"\"\"\"SELECT * FROM POSTS\"\"\")\r\n     return {\"data\": my_posts}\r\n \r\n \r\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n"
                },
                {
                    "date": 1663345102666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,10 @@\n \r\n \r\n @app.get(\"/posts\")\r\n async def get_posts():\r\n-    cursor.execute(\"\"\"\"SELECT * FROM POSTS\"\"\")\r\n+    posts = cursor.execute(\"\"\"\"SELECT * FROM POSTS\"\"\")\r\n+    print(posts)\r\n     return {\"data\": my_posts}\r\n \r\n \r\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n"
                },
                {
                    "date": 1663345114561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n while True:\r\n \r\n     try: \r\n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \r\n-                                user='postgres', password='truckto r3', cursor_factory=RealDictCursor)\r\n+                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n         cursor = conn.cursor()\r\n         print(\"Database connection was succesfull!\")\r\n         break\r\n     except Exception as error:\r\n"
                },
                {
                    "date": 1663345206038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,10 @@\n \r\n \r\n @app.get(\"/posts\")\r\n async def get_posts():\r\n-    posts = cursor.execute(\"\"\"\"SELECT * FROM POSTS\"\"\")\r\n+    cursor.execute(\"\"\"\"SELECT * FROM POSTS\"\"\")\r\n+    posts = cursor.fetchall()\r\n     print(posts)\r\n     return {\"data\": my_posts}\r\n \r\n \r\n"
                },
                {
                    "date": 1663345223875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n \r\n @app.get(\"/posts\")\r\n async def get_posts():\r\n-    cursor.execute(\"\"\"\"SELECT * FROM POSTS\"\"\")\r\n+    cursor.execute(\"\"\"SELECT * FROM POSTS\"\"\")\r\n     posts = cursor.fetchall()\r\n     print(posts)\r\n     return {\"data\": my_posts}\r\n \r\n"
                },
                {
                    "date": 1663345303687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \r\n \r\n @app.get(\"/posts\")\r\n async def get_posts():\r\n-    cursor.execute(\"\"\"SELECT * FROM POSTS\"\"\")\r\n+    cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\r\n     posts = cursor.fetchall()\r\n     print(posts)\r\n     return {\"data\": my_posts}\r\n \r\n"
                },
                {
                    "date": 1663345621929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,9 @@\n         print(\"Connecting from database failed\")\r\n         print(\"Error: \", error)\r\n         time.sleep(2)\r\n \r\n-my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n-\"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n-\r\n def find_post(id):\r\n     for p in my_posts:\r\n         if p[\"id\"] == id:\r\n             return p\r\n"
                },
                {
                    "date": 1663345639565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,14 +28,8 @@\n     except Exception as error:\r\n         print(\"Connecting from database failed\")\r\n         print(\"Error: \", error)\r\n         time.sleep(2)\r\n-\r\n-\r\n-def find_post(id):\r\n-    for p in my_posts:\r\n-        if p[\"id\"] == id:\r\n-            return p\r\n  \r\n \r\n def find_index_post(id):\r\n     for i, p in enumerate(my_posts):\r\n"
                },
                {
                    "date": 1663345673151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,17 @@\n     except Exception as error:\r\n         print(\"Connecting from database failed\")\r\n         print(\"Error: \", error)\r\n         time.sleep(2)\r\n+\r\n+my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n+\"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n+\r\n+\r\n+def find_post(id):\r\n+    for p in my_posts:\r\n+        if p[\"id\"] == id:\r\n+            return p\r\n  \r\n \r\n def find_index_post(id):\r\n     for i, p in enumerate(my_posts):\r\n"
                },
                {
                    "date": 1663345721022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n async def get_posts():\r\n     cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\r\n     posts = cursor.fetchall()\r\n     print(posts)\r\n-    return {\"data\": my_posts}\r\n+    return {\"data\": posts}\r\n \r\n \r\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n def create_post(post: Post):\r\n"
                },
                {
                    "date": 1663346724504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,13 +60,13 @@\n \r\n \r\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n def create_post(post: Post):\r\n-    post_dict = post.dict()\r\n-    post_dict['id'] = randrange(0, 10000000)\r\n-    my_posts.append(post_dict)\r\n-    #print(post.dict())\r\n-    return {\"data\": post_dict}\r\n+    cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) \"\"\",\r\n+                   (post.content, post.title, post.published))\r\n+    posts = cursor.fetchall()\r\n+    print(posts)\r\n+    return {\"data\": posts}\r\n # title str, content str, category, Bool published\r\n \r\n \r\n @app.get(\"/posts/latest\")\r\n"
                },
                {
                    "date": 1663346731526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,8 @@\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n def create_post(post: Post):\r\n     cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) \"\"\",\r\n                    (post.content, post.title, post.published))\r\n-    posts = cursor.fetchall()\r\n     print(posts)\r\n     return {\"data\": posts}\r\n # title str, content str, category, Bool published\r\n \r\n"
                },
                {
                    "date": 1663346760193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,10 +62,10 @@\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n def create_post(post: Post):\r\n     cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) \"\"\",\r\n                    (post.content, post.title, post.published))\r\n-    print(posts)\r\n-    return {\"data\": posts}\r\n+    new_post = cursor.fetchone()\r\n+    return {\"data\": new_post}\r\n # title str, content str, category, Bool published\r\n \r\n \r\n @app.get(\"/posts/latest\")\r\n"
                },
                {
                    "date": 1663346853810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,10 @@\n \r\n \r\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n def create_post(post: Post):\r\n-    cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) \"\"\",\r\n+    cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\r\n+                   * \"\"\",\r\n                    (post.content, post.title, post.published))\r\n     new_post = cursor.fetchone()\r\n     return {\"data\": new_post}\r\n # title str, content str, category, Bool published\r\n"
                },
                {
                    "date": 1663347156046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,10 @@\n     cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\r\n                    * \"\"\",\r\n                    (post.content, post.title, post.published))\r\n     new_post = cursor.fetchone()\r\n+    conn.commit()\r\n+    \r\n     return {\"data\": new_post}\r\n # title str, content str, category, Bool published\r\n \r\n \r\n"
                },
                {
                    "date": 1663347286916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,13 +78,9 @@\n \r\n \r\n @app.get(\"/posts/{id}\")\r\n def get_post(id:int, response: Response):\r\n-    post = find_post(id)\r\n-    if not post: \r\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\r\n-                            detail=f\"post with id: {id} was not found\")\r\n-    return {\"post_detail\": post}\r\n+    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (id))\r\n \r\n \r\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n def delete_post(id: int):\r\n"
                },
                {
                    "date": 1663347325259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,11 @@\n     return {\"detail\": post}\r\n \r\n \r\n @app.get(\"/posts/{id}\")\r\n-def get_post(id:int, response: Response):\r\n+def get_post(id:int):\r\n     cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (id))\r\n+    \r\n \r\n \r\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n def delete_post(id: int):\r\n"
                },
                {
                    "date": 1663347332852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \r\n \r\n @app.get(\"/posts/{id}\")\r\n def get_post(id:int):\r\n-    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (id))\r\n+    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\r\n     \r\n \r\n \r\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n"
                },
                {
                    "date": 1663347385346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,9 @@\n \r\n @app.get(\"/posts/{id}\")\r\n def get_post(id:int):\r\n     cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\r\n+    post = cursor.fetchone()\r\n     \r\n \r\n \r\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n"
                },
                {
                    "date": 1663347475283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,11 @@\n @app.get(\"/posts/{id}\")\r\n def get_post(id:int):\r\n     cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\r\n     post = cursor.fetchone()\r\n-    \r\n+    if not post:\r\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\r\n+                            detail=f\"post with id: {id} was not found\")\r\n \r\n \r\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n def delete_post(id: int):\r\n"
                },
                {
                    "date": 1663347493324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n     post = cursor.fetchone()\r\n     if not post:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\r\n                             detail=f\"post with id: {id} was not found\")\r\n+    return {\"post_detail\": post}\r\n \r\n \r\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n def delete_post(id: int):\r\n"
                },
                {
                    "date": 1663347654273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,10 @@\n \r\n \r\n @app.put(\"/posts/{id}\")\r\n def update_post(id: int, post: Post):\r\n-    index = find_index_post(id)\r\n+\r\n+    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s \"\"\")\r\n     \r\n     if index == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n"
                },
                {
                    "date": 1663347679141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,10 @@\n \r\n @app.put(\"/posts/{id}\")\r\n def update_post(id: int, post: Post):\r\n \r\n-    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s \"\"\")\r\n+    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s\"\"\", \r\n+                   (post.title, post.content, post.published))\r\n     \r\n     if index == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n"
                },
                {
                    "date": 1663347699865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,9 @@\n \r\n     cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s\"\"\", \r\n                    (post.title, post.content, post.published))\r\n     \r\n+    updated_post = cursor.fetchone\r\n     if index == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n     \r\n"
                },
                {
                    "date": 1663347711213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,10 +105,10 @@\n \r\n     cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s\"\"\", \r\n                    (post.title, post.content, post.published))\r\n     \r\n-    updated_post = cursor.fetchone\r\n-    if index == None:\r\n+    updated_post = cursor.fetchone()\r\n+    if updated_post == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n     \r\n     post_dict = post.dict()\r\n"
                },
                {
                    "date": 1663347741103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,9 @@\n     updated_post = cursor.fetchone()\r\n     if updated_post == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n-    \r\n-    post_dict = post.dict()\r\n-    post_dict['id'] = id\r\n-    my_posts[index] = post_dict\r\n-    return Response(status_code=status.HTTP_204_NO_CONTENT)\r\n \r\n+    return Response(\"data\": updated_post)\r\n \r\n \r\n+\r\n"
                },
                {
                    "date": 1663347750431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,8 @@\n     if updated_post == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n \r\n-    return Response(\"data\": updated_post)\r\n+    return {\"data\": updated_post}\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1663347825822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,10 @@\n     cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s\"\"\", \r\n                    (post.title, post.content, post.published))\r\n     \r\n     updated_post = cursor.fetchone()\r\n+    conn.commit()\r\n+    \r\n     if updated_post == None:\r\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                             detail=f\"post with id: {id} does not exist\")\r\n \r\n"
                },
                {
                    "date": 1663347911852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,10 +102,10 @@\n \r\n @app.put(\"/posts/{id}\")\r\n def update_post(id: int, post: Post):\r\n \r\n-    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s\"\"\", \r\n-                   (post.title, post.content, post.published))\r\n+    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\"\"\", \r\n+                   (post.title, post.content, post.published, str(id)))\r\n     \r\n     updated_post = cursor.fetchone()\r\n     conn.commit()\r\n     \r\n"
                },
                {
                    "date": 1663347939272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,10 @@\n \r\n @app.put(\"/posts/{id}\")\r\n def update_post(id: int, post: Post):\r\n \r\n-    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\"\"\", \r\n+    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\r\n+    RETURNING *\"\"\", \r\n                    (post.title, post.content, post.published, str(id)))\r\n     \r\n     updated_post = cursor.fetchone()\r\n     conn.commit()\r\n"
                },
                {
                    "date": 1663349118312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n import psycopg2\r\n from psycopg2.extras import RealDictCursor\r\n import time\r\n \r\n+models.Base.metada.create_all(vind=engine)\r\n+\r\n app = FastAPI()\r\n \r\n \r\n class Post(BaseModel):\r\n"
                },
                {
                    "date": 1663349144365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n from random import randrange\r\n import psycopg2\r\n from psycopg2.extras import RealDictCursor\r\n import time\r\n+from . import models\r\n+from .database import engine\r\n \r\n models.Base.metada.create_all(vind=engine)\r\n \r\n app = FastAPI()\r\n"
                },
                {
                    "date": 1663349160027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,12 @@\n models.Base.metada.create_all(vind=engine)\r\n \r\n app = FastAPI()\r\n \r\n+def get_db()\r\n \r\n+\r\n+\r\n class Post(BaseModel):\r\n     title: str\r\n     content: str\r\n     published: bool = True\r\n"
                },
                {
                    "date": 1663349195928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,15 @@\n \r\n app = FastAPI()\r\n \r\n def get_db()\r\n+    db = SessionLocal()\r\n+    try:\r\n+        yield db\r\n+    finally \r\n+        db.close()\r\n \r\n \r\n-\r\n class Post(BaseModel):\r\n     title: str\r\n     content: str\r\n     published: bool = True\r\n"
                },
                {
                    "date": 1663349206860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,13 @@\n models.Base.metada.create_all(vind=engine)\r\n \r\n app = FastAPI()\r\n \r\n-def get_db()\r\n+def get_db():\r\n     db = SessionLocal()\r\n     try:\r\n         yield db\r\n-    finally \r\n+    finally:\r\n         db.close()\r\n \r\n \r\n class Post(BaseModel):\r\n"
                },
                {
                    "date": 1663349267575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,12 @@\n \r\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n+@app.get(\"/sqlalchemy\")\r\n+def test_posts(db: Session = Depends(get_db))\r\n \r\n+\r\n def find_post(id):\r\n     for p in my_posts:\r\n         if p[\"id\"] == id:\r\n             return p\r\n"
                },
                {
                    "date": 1663349292680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import psycopg2\r\n from psycopg2.extras import RealDictCursor\r\n import time\r\n from . import models\r\n-from .database import engine\r\n+from .database import engine, SessionLocal\r\n \r\n models.Base.metada.create_all(vind=engine)\r\n \r\n app = FastAPI()\r\n"
                },
                {
                    "date": 1663349307234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from random import randrange\r\n import psycopg2\r\n from psycopg2.extras import RealDictCursor\r\n import time\r\n+import sqlalchemy.orm import Session\r\n from . import models\r\n from .database import engine, SessionLocal\r\n \r\n models.Base.metada.create_all(vind=engine)\r\n"
                },
                {
                    "date": 1663349321782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n from typing import Optional\r\n from xml.dom import registerDOMImplementation\r\n-from fastapi import FastAPI, Response, status, HTTPException\r\n+from fastapi import FastAPI, Response, status, HTTPException, Depends\r\n from fastapi.params import Body\r\n from pydantic import BaseModel\r\n from random import randrange\r\n import psycopg2\r\n from psycopg2.extras import RealDictCursor\r\n import time\r\n-import sqlalchemy.orm import Session\r\n+from sqlalchemy.orm import Session\r\n from . import models\r\n from .database import engine, SessionLocal\r\n \r\n models.Base.metada.create_all(vind=engine)\r\n"
                },
                {
                    "date": 1663349363365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,10 @@\n my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n \"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n \r\n @app.get(\"/sqlalchemy\")\r\n-def test_posts(db: Session = Depends(get_db))\r\n+def test_posts(db: Session = Depends(get_db)):\r\n+    return {\"status\": \"success\"}\r\n \r\n \r\n def find_post(id):\r\n     for p in my_posts:\r\n"
                },
                {
                    "date": 1663349414533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from sqlalchemy.orm import Session\r\n from . import models\r\n from .database import engine, SessionLocal\r\n \r\n-models.Base.metada.create_all(vind=engine)\r\n+models.Base.metadata.create_all(vind=engine)\r\n \r\n app = FastAPI()\r\n \r\n def get_db():\r\n"
                },
                {
                    "date": 1663349421886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from sqlalchemy.orm import Session\r\n from . import models\r\n from .database import engine, SessionLocal\r\n \r\n-models.Base.metadata.create_all(vind=engine)\r\n+models.Base.metadata.create_all(bind=engine)\r\n \r\n app = FastAPI()\r\n \r\n def get_db():\r\n"
                },
                {
                    "date": 1663349509508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from psycopg2.extras import RealDictCursor\r\n import time\r\n from sqlalchemy.orm import Session\r\n from . import models\r\n-from .database import engine, SessionLocal\r\n+from .database import engine, SessionLocal, get_db\r\n \r\n models.Base.metadata.create_all(bind=engine)\r\n \r\n app = FastAPI()\r\n"
                },
                {
                    "date": 1663349518601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from psycopg2.extras import RealDictCursor\r\n import time\r\n from sqlalchemy.orm import Session\r\n from . import models\r\n-from .database import engine, SessionLocal, get_db\r\n+from .database import engine, get_db\r\n \r\n models.Base.metadata.create_all(bind=engine)\r\n \r\n app = FastAPI()\r\n"
                },
                {
                    "date": 1663349542445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,8 @@\n models.Base.metadata.create_all(bind=engine)\r\n \r\n app = FastAPI()\r\n \r\n-def get_db():\r\n-    db = SessionLocal()\r\n-    try:\r\n-        yield db\r\n-    finally:\r\n-        db.close()\r\n-\r\n-\r\n class Post(BaseModel):\r\n     title: str\r\n     content: str\r\n     published: bool = True\r\n"
                },
                {
                    "date": 1663691924594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,128 +1,128 @@\n-from typing import Optional\r\n-from xml.dom import registerDOMImplementation\r\n-from fastapi import FastAPI, Response, status, HTTPException, Depends\r\n-from fastapi.params import Body\r\n-from pydantic import BaseModel\r\n-from random import randrange\r\n-import psycopg2\r\n-from psycopg2.extras import RealDictCursor\r\n-import time\r\n-from sqlalchemy.orm import Session\r\n-from . import models\r\n-from .database import engine, get_db\r\n-\r\n-models.Base.metadata.create_all(bind=engine)\r\n-\r\n-app = FastAPI()\r\n-\r\n-class Post(BaseModel):\r\n-    title: str\r\n-    content: str\r\n-    published: bool = True\r\n-    rating: Optional[int] = None\r\n-\r\n-while True:\r\n-\r\n-    try: \r\n-        conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \r\n-                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\r\n-        cursor = conn.cursor()\r\n-        print(\"Database connection was succesfull!\")\r\n-        break\r\n-    except Exception as error:\r\n-        print(\"Connecting from database failed\")\r\n-        print(\"Error: \", error)\r\n-        time.sleep(2)\r\n-\r\n-my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n-\"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n-\r\n-@app.get(\"/sqlalchemy\")\r\n-def test_posts(db: Session = Depends(get_db)):\r\n-    return {\"status\": \"success\"}\r\n-\r\n-\r\n-def find_post(id):\r\n-    for p in my_posts:\r\n-        if p[\"id\"] == id:\r\n-            return p\r\n- \r\n-\r\n-def find_index_post(id):\r\n-    for i, p in enumerate(my_posts):\r\n-        if p['id'] == id:\r\n-            return i\r\n-        \r\n-\r\n-@app.get(\"/\")\r\n-async def root():\r\n-    return {\"message\": \"Python API\"}\r\n-\r\n-\r\n-@app.get(\"/posts\")\r\n-async def get_posts():\r\n-    cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\r\n-    posts = cursor.fetchall()\r\n-    print(posts)\r\n-    return {\"data\": posts}\r\n-\r\n-\r\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\n-def create_post(post: Post):\r\n-    cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\r\n-                   * \"\"\",\r\n-                   (post.content, post.title, post.published))\r\n-    new_post = cursor.fetchone()\r\n-    conn.commit()\r\n-    \r\n-    return {\"data\": new_post}\r\n-# title str, content str, category, Bool published\r\n-\r\n-\r\n-@app.get(\"/posts/latest\")\r\n-def get_latest_post():\r\n-    post = my_posts[len(my_posts)-1]\r\n-    return {\"detail\": post}\r\n-\r\n-\r\n-@app.get(\"/posts/{id}\")\r\n-def get_post(id:int):\r\n-    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\r\n-    post = cursor.fetchone()\r\n-    if not post:\r\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\r\n-                            detail=f\"post with id: {id} was not found\")\r\n-    return {\"post_detail\": post}\r\n-\r\n-\r\n-@app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\n-def delete_post(id: int):\r\n-    # deleting post\r\n-    index = find_index_post(id)\r\n-    \r\n-    if index == None:\r\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n-                            detail=f\"post with id: {id} does not exist\")\r\n-    \r\n-    my_posts.pop(index)\r\n-    return Response(status_code=status.HTTP_204_NO_CONTENT)\r\n-\r\n-\r\n-@app.put(\"/posts/{id}\")\r\n-def update_post(id: int, post: Post):\r\n-\r\n-    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\r\n-    RETURNING *\"\"\", \r\n-                   (post.title, post.content, post.published, str(id)))\r\n-    \r\n-    updated_post = cursor.fetchone()\r\n-    conn.commit()\r\n-    \r\n-    if updated_post == None:\r\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n-                            detail=f\"post with id: {id} does not exist\")\r\n-\r\n-    return {\"data\": updated_post}\r\n-\r\n-\r\n-\r\n+from typing import Optional\n+from xml.dom import registerDOMImplementation\n+from fastapi import FastAPI, Response, status, HTTPException, Depends\n+from fastapi.params import Body\n+from pydantic import BaseModel\n+from random import randrange\n+import psycopg2\n+from psycopg2.extras import RealDictCursor\n+import time\n+from sqlalchemy.orm import Session\n+from . import models\n+from .database import engine, get_db\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+class Post(BaseModel):\n+    title: str\n+    content: str\n+    published: bool = True\n+    rating: Optional[int] = None\n+\n+while True:\n+\n+    try: \n+        conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \n+                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\n+        cursor = conn.cursor()\n+        print(\"Database connection was succesfull!\")\n+        break\n+    except Exception as error:\n+        print(\"Connecting from database failed\")\n+        print(\"Error: \", error)\n+        time.sleep(2)\n+\n+my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\n+\"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\n+\n+@app.get(\"/sqlalchemy\")\n+def test_posts(db: Session = Depends(get_db)):\n+    return {\"status\": \"success\"}\n+\n+\n+def find_post(id):\n+    for p in my_posts:\n+        if p[\"id\"] == id:\n+            return p\n+ \n+\n+def find_index_post(id):\n+    for i, p in enumerate(my_posts):\n+        if p['id'] == id:\n+            return i\n+        \n+\n+@app.get(\"/\")\n+async def root():\n+    return {\"message\": \"Python API\"}\n+\n+\n+@app.get(\"/posts\")\n+async def get_posts():\n+    cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n+    posts = cursor.fetchall()\n+    print(posts)\n+    return {\"data\": posts}\n+\n+\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n+def create_post(post: Post):\n+    cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\n+                   * \"\"\",\n+                   (post.content, post.title, post.published))\n+    new_post = cursor.fetchone()\n+    conn.commit()\n+    \n+    return {\"data\": new_post}\n+# title str, content str, category, Bool published\n+\n+\n+@app.get(\"/posts/latest\")\n+def get_latest_post():\n+    post = my_posts[len(my_posts)-1]\n+    return {\"detail\": post}\n+\n+\n+@app.get(\"/posts/{id}\")\n+def get_post(id:int):\n+    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\n+    post = cursor.fetchone()\n+    if not post:\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n+                            detail=f\"post with id: {id} was not found\")\n+    return {\"post_detail\": post}\n+\n+\n+@app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n+def delete_post(id: int):\n+    # deleting post\n+    index = find_index_post(id)\n+    \n+    if index == None:\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n+                            detail=f\"post with id: {id} does not exist\")\n+    \n+    my_posts.pop(index)\n+    return Response(status_code=status.HTTP_204_NO_CONTENT)\n+\n+\n+@app.put(\"/posts/{id}\")\n+def update_post(id: int, post: Post):\n+\n+    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\n+    RETURNING *\"\"\", \n+                   (post.title, post.content, post.published, str(id)))\n+    \n+    updated_post = cursor.fetchone()\n+    conn.commit()\n+    \n+    if updated_post == None:\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n+                            detail=f\"post with id: {id} does not exist\")\n+\n+    return {\"data\": updated_post}\n+\n+\n+\n"
                },
                {
                    "date": 1663691935747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n def test_posts(db: Session = Depends(get_db)):\n     return {\"status\": \"success\"}\n \n \n-def find_post(id):\n+def post_by(id):\n     for p in my_posts:\n         if p[\"id\"] == id:\n             return p\n  \n"
                },
                {
                    "date": 1663691944946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,28 +33,14 @@\n         print(\"Connecting from database failed\")\n         print(\"Error: \", error)\n         time.sleep(2)\n \n-my_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\n-\"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\n \n @app.get(\"/sqlalchemy\")\n def test_posts(db: Session = Depends(get_db)):\n     return {\"status\": \"success\"}\n \n \n-def post_by(id):\n-    for p in my_posts:\n-        if p[\"id\"] == id:\n-            return p\n- \n-\n-def find_index_post(id):\n-    for i, p in enumerate(my_posts):\n-        if p['id'] == id:\n-            return i\n-        \n-\n @app.get(\"/\")\n async def root():\n     return {\"message\": \"Python API\"}\n \n"
                },
                {
                    "date": 1663691951005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,15 +63,8 @@\n     \n     return {\"data\": new_post}\n # title str, content str, category, Bool published\n \n-\n-@app.get(\"/posts/latest\")\n-def get_latest_post():\n-    post = my_posts[len(my_posts)-1]\n-    return {\"detail\": post}\n-\n-\n @app.get(\"/posts/{id}\")\n def get_post(id:int):\n     cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\n     post = cursor.fetchone()\n"
                },
                {
                    "date": 1663691983263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,16 +75,14 @@\n \n \n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def delete_post(id: int):\n-    # deleting post\n-    index = find_index_post(id)\n     \n+    \n     if index == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n     \n-    my_posts.pop(index)\n     return Response(status_code=status.HTTP_204_NO_CONTENT)\n \n \n @app.put(\"/posts/{id}\")\n"
                },
                {
                    "date": 1663692013915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n \n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def delete_post(id: int):\n     \n+    post = db.query(models.Post).filter(models.Post.id == id)\n     \n     if index == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n"
                },
                {
                    "date": 1663692034006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     return {\"post_detail\": post}\n \n \n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n-def delete_post(id: int):\n+def delete_post(id: int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id)\n     \n     if index == None:\n"
                },
                {
                    "date": 1663692041132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     return {\"post_detail\": post}\n \n \n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n-def delete_post(id: int, db: Session = Depends(get_db)):\n+def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id)\n     \n     if index == None:\n"
                },
                {
                    "date": 1663692051083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n     return Response(status_code=status.HTTP_204_NO_CONTENT)\n \n \n @app.put(\"/posts/{id}\")\n-def update_post(id: int, post: Post):\n+def editar_post(id: int, post: Post):\n \n     cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\n     RETURNING *\"\"\", \n                    (post.title, post.content, post.published, str(id)))\n"
                },
                {
                    "date": 1663692074801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id)\n     \n-    if index == None:\n+    if post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n     \n     return Response(status_code=status.HTTP_204_NO_CONTENT)\n"
                },
                {
                    "date": 1663692137876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id)\n     \n-    if post == None:\n+    if post.first() == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n     \n     return Response(status_code=status.HTTP_204_NO_CONTENT)\n"
                },
                {
                    "date": 1663692164432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n     if post.first() == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n     \n-    return Response(status_code=status.HTTP_204_NO_CONTENT)\n+    post.delete(synchronize_session=False)\n \n \n @app.put(\"/posts/{id}\")\n def editar_post(id: int, post: Post):\n"
                },
                {
                    "date": 1663692308010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n     \n     post.delete(synchronize_session=False)\n+    db.commit()\n \n \n @app.put(\"/posts/{id}\")\n def editar_post(id: int, post: Post):\n"
                },
                {
                    "date": 1663692366006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,10 @@\n                             detail=f\"post with id: {id} does not exist\")\n     \n     post.delete(synchronize_session=False)\n     db.commit()\n+    \n+    return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n \n @app.put(\"/posts/{id}\")\n def editar_post(id: int, post: Post):\n"
                },
                {
                    "date": 1663692417301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,13 +89,11 @@\n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n \n @app.put(\"/posts/{id}\")\n-def editar_post(id: int, post: Post):\n+def editar_post(id: int, post: Post, db: Session = Depends(get_db)):\n \n-    cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s\n-    RETURNING *\"\"\", \n-                   (post.title, post.content, post.published, str(id)))\n+    db.query(models)\n     \n     updated_post = cursor.fetchone()\n     conn.commit()\n     \n"
                },
                {
                    "date": 1663692434070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n \n @app.put(\"/posts/{id}\")\n def editar_post(id: int, post: Post, db: Session = Depends(get_db)):\n \n-    db.query(models)\n+    db.query(models.Post).filter(models.Post.id)\n     \n     updated_post = cursor.fetchone()\n     conn.commit()\n     \n"
                },
                {
                    "date": 1663692469304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,12 +91,11 @@\n \n @app.put(\"/posts/{id}\")\n def editar_post(id: int, post: Post, db: Session = Depends(get_db)):\n \n-    db.query(models.Post).filter(models.Post.id)\n+    post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n-    updated_post = cursor.fetchone()\n-    conn.commit()\n+    post = post_query\n     \n     if updated_post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n"
                },
                {
                    "date": 1663692475210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n def editar_post(id: int, post: Post, db: Session = Depends(get_db)):\n \n     post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n-    post = post_query\n+    post = post_query.first()\n     \n     if updated_post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n"
                },
                {
                    "date": 1663692481663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n     post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n     post = post_query.first()\n     \n-    if updated_post == None:\n+    if post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n \n     return {\"data\": updated_post}\n"
                },
                {
                    "date": 1663692494093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,10 @@\n     \n     if post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n+        \n+    post_query.update()\n \n     return {\"data\": updated_post}\n \n \n"
                },
                {
                    "date": 1663692549394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n     if post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n         \n-    post_query.update()\n+    post_query.update(post.dict(), synchronize_session=False)\n \n     return {\"data\": updated_post}\n \n \n"
                },
                {
                    "date": 1663692557011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,10 @@\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n         \n     post_query.update(post.dict(), synchronize_session=False)\n+    \n+    db.commit()\n \n     return {\"data\": updated_post}\n \n \n"
                },
                {
                    "date": 1663692576314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,8 @@\n     post_query.update(post.dict(), synchronize_session=False)\n     \n     db.commit()\n \n-    return {\"data\": updated_post}\n+    return {\"data\": post_query.first()}\n \n \n \n"
                },
                {
                    "date": 1663692645709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n \n @app.put(\"/posts/{id}\")\n-def editar_post(id: int, post: Post, db: Session = Depends(get_db)):\n+def editar_post(id: int, updated_post: Post, db: Session = Depends(get_db)):\n \n     post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n     post = post_query.first()\n@@ -99,9 +99,9 @@\n     if post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n         \n-    post_query.update(post.dict(), synchronize_session=False)\n+    post_query.update(updated_post.dict(), synchronize_session=False)\n     \n     db.commit()\n \n     return {\"data\": post_query.first()}\n"
                },
                {
                    "date": 1663692662150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n \n @app.put(\"/posts/{id}\")\n-def editar_post(id: int, updated_post: Post, db: Session = Depends(get_db)):\n+def editar_post(id: int, editado_post: Post, db: Session = Depends(get_db)):\n \n     post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n     post = post_query.first()\n@@ -99,9 +99,9 @@\n     if post == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                             detail=f\"post with id: {id} does not exist\")\n         \n-    post_query.update(updated_post.dict(), synchronize_session=False)\n+    post_query.update(editado_post.dict(), synchronize_session=False)\n     \n     db.commit()\n \n     return {\"data\": post_query.first()}\n"
                },
                {
                    "date": 1663692723249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,10 @@\n     \n     return {\"data\": new_post}\n # title str, content str, category, Bool published\n \n+\n+#Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int):\n     cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\n     post = cursor.fetchone()\n@@ -73,8 +75,9 @@\n                             detail=f\"post with id: {id} was not found\")\n     return {\"post_detail\": post}\n \n \n+#Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id)\n@@ -88,8 +91,9 @@\n     \n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n \n+#Ruta editar post por ID\n @app.put(\"/posts/{id}\")\n def editar_post(id: int, editado_post: Post, db: Session = Depends(get_db)):\n \n     post_query = db.query(models.Post).filter(models.Post.id == id)\n"
                },
                {
                    "date": 1663692757034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,16 +44,18 @@\n async def root():\n     return {\"message\": \"Python API\"}\n \n \n+#Obtener Listado de posts\n @app.get(\"/posts\")\n async def get_posts():\n     cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n     posts = cursor.fetchall()\n     print(posts)\n     return {\"data\": posts}\n \n \n+#Ruta crearción de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def create_post(post: Post):\n     cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\n                    * \"\"\",\n"
                },
                {
                    "date": 1663692785408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,19 +34,14 @@\n         print(\"Error: \", error)\n         time.sleep(2)\n \n \n-@app.get(\"/sqlalchemy\")\n-def test_posts(db: Session = Depends(get_db)):\n-    return {\"status\": \"success\"}\n-\n-\n @app.get(\"/\")\n async def root():\n     return {\"message\": \"Python API\"}\n \n \n-#Obtener Listado de posts\n+#Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts():\n     cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n     posts = cursor.fetchall()\n"
                },
                {
                    "date": 1663692797912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,11 @@\n     except Exception as error:\n         print(\"Connecting from database failed\")\n         print(\"Error: \", error)\n         time.sleep(2)\n+        \n \n-\n+#Mensaje de inicio\n @app.get(\"/\")\n async def root():\n     return {\"message\": \"Python API\"}\n \n"
                },
                {
                    "date": 1663692815441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"message\": \"Python API\"}\n+    return {\"Bienvenido\": \"Python API\"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692831739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"Python API\"}\n+    return {\"Bienvenido\": \"API simulación red social realizada con Fast API\"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692839414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API simulación red social realizada con Fast API\"}\n+    return {\"Bienvenido\": \"API red social realizada con Fast API\"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692848829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API red social realizada con Fast API\"}\n+    return {\"Bienvenido\": \"API red social realizada con Fast API: rutas\"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692864945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API red social realizada con Fast API: rutas\"}\n+    return {\"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692877142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"}\n+    return {\"Bienvenido\": \"API red social realizada con Fast API: /n/post/{id} \"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692883847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API red social realizada con Fast API: /n/post/{id} \"}\n+    return {\"Bienvenido\": \"API red social realizada con Fast API: \"/n\"/post/{id} \"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692906785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API red social realizada con Fast API: \"/n\"/post/{id} \"}\n+    return {f\"Bienvenido\": \"API red social realizada con Fast API: /n/post/{id} \"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692926211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {f\"Bienvenido\": \"API red social realizada con Fast API: /n/post/{id} \"}\n+    return {\"Bienvenido\": \"API red social realizada con Fast API: \"+/n+\"/post/{id} \"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692956742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    return {\"Bienvenido\": \"API red social realizada con Fast API: \"+/n+\"/post/{id} \"}\n+    mensaje = \"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"\n+    return {\"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663692966697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    mensaje = \"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"\n+    mensaje = f\"Bienvenido:\" \"API red social realizada con Fast API: /post/{id}\"\n     return {\"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"}\n \n \n #Obtener listado de posts\n"
                },
                {
                    "date": 1663692972591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    mensaje = f\"Bienvenido:\" \"API red social realizada con Fast API: /post/{id}\"\n+    mensaje = f\"Bienvenido API red social realizada con Fast API\"\n     return {\"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"}\n \n \n #Obtener listado de posts\n"
                },
                {
                    "date": 1663692981961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n     mensaje = f\"Bienvenido API red social realizada con Fast API\"\n-    return {\"Bienvenido\": \"API red social realizada con Fast API: /post/{id} \"}\n+    return {mensaje}\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n"
                },
                {
                    "date": 1663693001777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    mensaje = f\"Bienvenido API red social realizada con Fast API\"\n+    mensaje = f\"Bienvenido, esto es una API red social realizada con Fast API\"\n     return {mensaje}\n \n \n #Obtener listado de posts\n"
                },
                {
                    "date": 1663693064680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n-    mensaje = f\"Bienvenido, esto es una API red social realizada con Fast API\"\n+    mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n \n \n #Obtener listado de posts\n"
                },
                {
                    "date": 1663693191380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \n \n #Ruta crearción de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n-def create_post(post: Post):\n+def crear_post(post: Post):\n     cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\n                    * \"\"\",\n                    (post.content, post.title, post.published))\n     new_post = cursor.fetchone()\n"
                },
                {
                    "date": 1663693486778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,10 @@\n \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n-async def get_posts():\n-    cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n-    posts = cursor.fetchall()\n-    print(posts)\n+async def get_posts(db: Session = Depends(get_db)):\n+    \n     return {\"data\": posts}\n \n \n #Ruta crearción de post\n"
                },
                {
                    "date": 1663693531304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n #Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n     \n+    posts= db.query(models.Post).all()\n     return {\"data\": posts}\n \n \n #Ruta crearción de post\n"
                },
                {
                    "date": 1663693553755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,8 @@\n     new_post = cursor.fetchone()\n     conn.commit()\n     \n     return {\"data\": new_post}\n-# title str, content str, category, Bool published\n \n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n"
                },
                {
                    "date": 1663693582356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,16 +49,12 @@\n     posts= db.query(models.Post).all()\n     return {\"data\": posts}\n \n \n-#Ruta crearción de post\n+#Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post):\n-    cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING\n-                   * \"\"\",\n-                   (post.content, post.title, post.published))\n-    new_post = cursor.fetchone()\n-    conn.commit()\n+    models.Post()\n     \n     return {\"data\": new_post}\n \n \n"
                },
                {
                    "date": 1663693592570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post):\n+    \n     models.Post()\n-    \n     return {\"data\": new_post}\n \n \n #Ruta obtener post por ID\n"
                },
                {
                    "date": 1663693630479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n-def crear_post(post: Post):\n+def crear_post(post: Post, db: Session = Depends(get_db)):\n     \n-    models.Post()\n+    models.Post(ti)\n     return {\"data\": new_post}\n \n \n #Ruta obtener post por ID\n"
                },
                {
                    "date": 1663693704778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from importlib.resources import contents\n from typing import Optional\n from xml.dom import registerDOMImplementation\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n@@ -53,9 +54,11 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post, db: Session = Depends(get_db)):\n     \n-    models.Post(ti)\n+    new_post = models.Post(\n+        title=post.title, content=post.content, published=post.published\n+    )\n     return {\"data\": new_post}\n \n \n #Ruta obtener post por ID\n"
                },
                {
                    "date": 1663693728398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,12 @@\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(\n-        title=post.title, content=post.content, published=post.published\n-    )\n+        title=post.title, content=post.content, published=post.published)\n+    db.add(new_post)\n+    db.commit()\n+    db.refresh(new_post)\n     return {\"data\": new_post}\n \n \n #Ruta obtener post por ID\n"
                },
                {
                    "date": 1663693749685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,13 +54,15 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post, db: Session = Depends(get_db)):\n     \n+    print(post.dict())\n     new_post = models.Post(\n         title=post.title, content=post.content, published=post.published)\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n+    \n     return {\"data\": new_post}\n \n \n #Ruta obtener post por ID\n"
                },
                {
                    "date": 1663693774468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,10 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post, db: Session = Depends(get_db)):\n     \n-    print(post.dict())\n-    new_post = models.Post(\n-        title=post.title, content=post.content, published=post.published)\n+    \n+    new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n     \n"
                },
                {
                    "date": 1663693788720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,8 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: Post, db: Session = Depends(get_db)):\n     \n-    \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n"
                },
                {
                    "date": 1663693825282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,14 +65,11 @@\n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int):\n-    cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id)))\n-    post = cursor.fetchone()\n-    if not post:\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n-                            detail=f\"post with id: {id} was not found\")\n-    return {\"post_detail\": post}\n+    \n+    posts= db.query(models.Post).all()\n+    return {\"data\": posts}\n \n \n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n"
                },
                {
                    "date": 1663693845547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from gc import get_debug\n from importlib.resources import contents\n from typing import Optional\n from xml.dom import registerDOMImplementation\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n@@ -64,9 +65,9 @@\n \n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n-def get_post(id:int):\n+def get_post(id:int, db: Session = Depends(get_deb)):\n     \n     posts= db.query(models.Post).all()\n     return {\"data\": posts}\n \n"
                },
                {
                    "date": 1663693862002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n-def get_post(id:int, db: Session = Depends(get_deb)):\n+def get_post(id:int, db: Session = Depends(get_db)):\n     \n     posts= db.query(models.Post).all()\n     return {\"data\": posts}\n \n"
                },
                {
                    "date": 1663693868624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n-    posts= db.query(models.Post).all()\n+    posts= db.query(models.Post).filter\n     return {\"data\": posts}\n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663693878714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n-    posts= db.query(models.Post).filter\n+    posts= db.query(models.Post).filter(models.Post.id = id)\n     return {\"data\": posts}\n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663693909789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n-    posts= db.query(models.Post).filter(models.Post.id = id)\n+    posts= db.query(models.Post).filter(models.Post.id == id)\n     return {\"data\": posts}\n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663693919571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,11 @@\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n-    posts= db.query(models.Post).filter(models.Post.id == id)\n+    post= db.query(models.Post).filter(models.Post.id == id)\n+    \n+    \n     return {\"data\": posts}\n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663693968614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,11 @@\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n     post= db.query(models.Post).filter(models.Post.id == id)\n     \n-    \n+    if not post:\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n+                            detail=f\"post with id: {id} was not found\")\n     return {\"data\": posts}\n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663693976566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     \n     if not post:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n-    return {\"data\": posts}\n+    return {\"data\": post}\n \n \n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n"
                },
                {
                    "date": 1663694032436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n     post= db.query(models.Post).filter(models.Post.id == id)\n     \n-    if not post:\n+    if post.filter() == None:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n     return {\"data\": post}\n \n"
                },
                {
                    "date": 1663694050688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n     post= db.query(models.Post).filter(models.Post.id == id)\n     \n-    if post.filter() == None:\n+    if not post:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n     return {\"data\": post}\n \n"
                },
                {
                    "date": 1663694591731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,13 @@\n     mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n \n \n+\n+@app.get(\"/sqlalchemy\")\n+def test_posts(db: Session = Depends(get_db))\n+\n+\n #Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n     \n"
                },
                {
                    "date": 1663694615328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,10 @@\n \n @app.get(\"/sqlalchemy\")\n def test_posts(db: Session = Depends(get_db))\n \n+    posts = db.query(models.Post).all()\n+    \n \n #Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1663694626447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n @app.get(\"/sqlalchemy\")\n def test_posts(db: Session = Depends(get_db))\n \n     posts = db.query(models.Post).all()\n-    \n+    return {\"data\": posts}\n \n #Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1663694697338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,12 @@\n \n \n \n @app.get(\"/sqlalchemy\")\n-def test_posts(db: Session = Depends(get_db))\n+def test_posts(db: Session = Depends(get_db)):\n \n     posts = db.query(models.Post).all()\n-    return {\"data\": posts}\n+    return {\"data\": \"successfull\"}\n \n #Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1663694935907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n-    post= db.query(models.Post).filter(models.Post.id == id)\n+    post= db.query(models.Post).filter(models.Post.id == id).first()\n     \n     if not post:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n"
                },
                {
                    "date": 1663695371550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n-    post= db.query(models.Post).filter(models.Post.id == id).first()\n+    post = db.query(models.Post).filter(models.Post.id == id).first()\n     \n     if not post:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n"
                },
                {
                    "date": 1663695840665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n class Post(BaseModel):\n     title: str\n     content: str\n     published: bool = True\n-    rating: Optional[int] = None\n \n while True:\n \n     try: \n"
                },
                {
                    "date": 1663695994625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,10 @@\n \n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n+    \n \n-class Post(BaseModel):\n-    title: str\n-    content: str\n-    published: bool = True\n-\n while True:\n \n     try: \n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \n"
                },
                {
                    "date": 1663696008399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n from typing import Optional\n from xml.dom import registerDOMImplementation\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n-from pydantic import BaseModel\n from random import randrange\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n"
                },
                {
                    "date": 1663696034614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n from sqlalchemy.orm import Session\n-from . import models\n+from . import models, schemas\n from .database import engine, get_db\n \n models.Base.metadata.create_all(bind=engine)\n \n"
                },
                {
                    "date": 1663696073790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n \n \n #Ruta editar post por ID\n @app.put(\"/posts/{id}\")\n-def editar_post(id: int, editado_post: Post, db: Session = Depends(get_db)):\n+def editar_post(id: int, editado_post: schemas.Post, db: Session = Depends(get_db)):\n \n     post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n     post = post_query.first()\n"
                },
                {
                    "date": 1663696082096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n-def crear_post(post: Post, db: Session = Depends(get_db)):\n+def crear_post(post: schemaPost, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n"
                },
                {
                    "date": 1663696658412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,10 @@\n     return {\"data\": posts}\n \n \n #Ruta creación de post\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n-def crear_post(post: schemaPost, db: Session = Depends(get_db)):\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=)\n+def crear_post(post: schemas.Post, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n"
                },
                {
                    "date": 1663696666745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     return {\"data\": posts}\n \n \n #Ruta creación de post\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=)\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=)schemas.Post\n def crear_post(post: schemas.Post, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n"
                },
                {
                    "date": 1663696678062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     return {\"data\": posts}\n \n \n #Ruta creación de post\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=)schemas.Post\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def crear_post(post: schemas.Post, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n"
                },
                {
                    "date": 1663696762700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n-def crear_post(post: schemas.Post, db: Session = Depends(get_db)):\n+def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n"
                },
                {
                    "date": 1663696796220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,14 +56,14 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n     \n-    new_post = models.Post(**post.dict())\n-    db.add(new_post)\n+    nuevo_post = models.Post(**post.dict())\n+    db.add(nuevo_post)\n     db.commit()\n-    db.refresh(new_post)\n+    db.refresh(nuevo_post)\n     \n-    return {\"data\": new_post}\n+    return {\"data\": nuevo_post}\n \n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n"
                },
                {
                    "date": 1663696805191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n     db.add(nuevo_post)\n     db.commit()\n     db.refresh(nuevo_post)\n     \n-    return {\"data\": nuevo_post}\n+    return nuevo_post\n \n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n"
                },
                {
                    "date": 1663697619263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,8 @@\n     mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n \n \n-\n @app.get(\"/sqlalchemy\")\n def test_posts(db: Session = Depends(get_db)):\n \n     posts = db.query(models.Post).all()\n@@ -51,9 +50,8 @@\n     \n     posts= db.query(models.Post).all()\n     return {\"data\": posts}\n \n-\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n     \n@@ -63,9 +61,8 @@\n     db.refresh(nuevo_post)\n     \n     return nuevo_post\n \n-\n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\")\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n@@ -75,9 +72,8 @@\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n     return {\"data\": post}\n \n-\n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n@@ -91,9 +87,8 @@\n     db.commit()\n     \n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n-\n #Ruta editar post por ID\n @app.put(\"/posts/{id}\")\n def editar_post(id: int, editado_post: schemas.Post, db: Session = Depends(get_db)):\n \n"
                },
                {
                    "date": 1663697690116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     \n     return nuevo_post\n \n #Ruta obtener post por ID\n-@app.get(\"/posts/{id}\")\n+@app.get(\"/posts/{id}\", response_model=schemas.Post)\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id).first()\n     \n"
                },
                {
                    "date": 1663697795975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     \n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n #Ruta editar post por ID\n-@app.put(\"/posts/{id}\")\n+@app.put(\"/posts/{id}\", response_model=schemas.Post)\n def editar_post(id: int, editado_post: schemas.Post, db: Session = Depends(get_db)):\n \n     post_query = db.query(models.Post).filter(models.Post.id == id)\n     \n"
                },
                {
                    "date": 1663697882656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     \n     if not post:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n-    return {\"data\": post}\n+    return {post\n \n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def borrar_post(id: int, db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1663697924830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n     db.add(nuevo_post)\n     db.commit()\n     db.refresh(nuevo_post)\n     \n-    return nuevo_post\n+    return Response(status_code=status.HTTP_201_CREATED)\n \n #Ruta obtener post por ID\n @app.get(\"/posts/{id}\", response_model=schemas.Post)\n def get_post(id:int, db: Session = Depends(get_db)):\n@@ -70,9 +70,9 @@\n     \n     if not post:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"post with id: {id} was not found\")\n-    return {post\n+    return post\n \n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def borrar_post(id: int, db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1663698075726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n     \n     posts= db.query(models.Post).all()\n-    return {\"data\": posts}\n+    return posts\n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1663698340221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,19 +61,8 @@\n     db.refresh(nuevo_post)\n     \n     return Response(status_code=status.HTTP_201_CREATED)\n \n-#Ruta obtener post por ID\n-@app.get(\"/posts/{id}\", response_model=schemas.Post)\n-def get_post(id:int, db: Session = Depends(get_db)):\n-    \n-    post = db.query(models.Post).filter(models.Post.id == id).first()\n-    \n-    if not post:\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n-                            detail=f\"post with id: {id} was not found\")\n-    return post\n-\n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n"
                },
                {
                    "date": 1663698355772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,15 +43,32 @@\n \n     posts = db.query(models.Post).all()\n     return {\"data\": \"successfull\"}\n \n+\n+\n #Obtener listado de posts\n @app.get(\"/posts\")\n async def get_posts(db: Session = Depends(get_db)):\n     \n     posts= db.query(models.Post).all()\n     return posts\n \n+\n+\n+#Ruta obtener post por ID\n+@app.get(\"/posts/{id}\", response_model=schemas.Post)\n+def get_post(id:int, db: Session = Depends(get_db)):\n+    \n+    post = db.query(models.Post).filter(models.Post.id == id).first()\n+    \n+    if not post:\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n+                            detail=f\"post with id: {id} was not found\")\n+    return post\n+\n+\n+\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n     \n"
                },
                {
                    "date": 1663698363910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,8 +78,10 @@\n     db.refresh(nuevo_post)\n     \n     return Response(status_code=status.HTTP_201_CREATED)\n \n+\n+\n #Ruta borrar post por ID\n @app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n def borrar_post(id: int, db: Session = Depends(get_db)):\n     \n@@ -93,8 +95,10 @@\n     db.commit()\n     \n     return Response(status_code=status.HTTP_204_NOT_CONTENT)\n \n+\n+\n #Ruta editar post por ID\n @app.put(\"/posts/{id}\", response_model=schemas.Post)\n def editar_post(id: int, editado_post: schemas.Post, db: Session = Depends(get_db)):\n \n"
                },
                {
                    "date": 1663698853023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n while True:\n \n     try: \n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \n-                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\n+                                user='postgres', password='trucktr3', cursor_factory=RealDictCursor)\n         cursor = conn.cursor()\n         print(\"Database connection was succesfull!\")\n         break\n     except Exception as error:\n"
                },
                {
                    "date": 1663698864280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n while True:\n \n     try: \n         conn = psycopg2.connect(host='localhost', port=3306, database='postgres', \n-                                user='postgres', password='trucktr3', cursor_factory=RealDictCursor)\n+                                user='postgres', password='trucktor3', cursor_factory=RealDictCursor)\n         cursor = conn.cursor()\n         print(\"Database connection was succesfull!\")\n         break\n     except Exception as error:\n"
                },
                {
                    "date": 1663699301264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n-from gc import get_debug\n-from importlib.resources import contents\n-from typing import Optional\n-from xml.dom import registerDOMImplementation\n+from typing import Optional,\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n+from pydantic import BaseModel\n from random import randrange\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n from sqlalchemy.orm import Session\n+from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n \n models.Base.metadata.create_all(bind=engine)\n"
                },
                {
                    "date": 1663699317514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from typing import Optional,\n+from typing import Optional, List\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n from pydantic import BaseModel\n from random import randrange\n"
                },
                {
                    "date": 1663699354869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \n \n \n #Ruta obtener post por ID\n-@app.get(\"/posts/{id}\", response_model=schemas.Post)\n+@app.get(\"/posts/{id}\", response_model=List[schemas.Post])\n def get_post(id:int, db: Session = Depends(get_db)):\n     \n     post = db.query(models.Post).filter(models.Post.id == id).first()\n     \n"
                },
                {
                    "date": 1663699694646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n \n \n \n #Obtener listado de posts\n-@app.get(\"/posts\")\n+@app.get(\"/posts\", response_model=List[schemas.Post])\n async def get_posts(db: Session = Depends(get_db)):\n     \n     posts= db.query(models.Post).all()\n     return posts\n"
                },
                {
                    "date": 1663700370718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,4 +116,14 @@\n     return {\"data\": post_query.first()}\n \n \n \n+#Ruta creación de user\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n+def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n+    \n+    nuevo_post = models.Post(**post.dict())\n+    db.add(nuevo_post)\n+    db.commit()\n+    db.refresh(nuevo_post)\n+    \n+    return Response(status_code=status.HTTP_201_CREATED)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1663700434928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \n \n \n #Ruta creación de user\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n     \n     nuevo_post = models.Post(**post.dict())\n     db.add(nuevo_post)\n"
                },
                {
                    "date": 1663700795496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n \n \n #Ruta creación de user\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n-def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n+def crear_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     nuevo_post = models.Post(**post.dict())\n     db.add(nuevo_post)\n     db.commit()\n"
                },
                {
                    "date": 1663700810935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n #Ruta creación de user\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n-    nuevo_post = models.Post(**post.dict())\n+    nuevo_post = models.Post(**user.dict())\n     db.add(nuevo_post)\n     db.commit()\n     db.refresh(nuevo_post)\n     \n"
                },
                {
                    "date": 1663700822835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n #Ruta creación de user\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n-    nuevo_post = models.Post(**user.dict())\n+    new_user = models.Post(**user.dict())\n     db.add(nuevo_post)\n     db.commit()\n     db.refresh(nuevo_post)\n     \n"
                },
                {
                    "date": 1663700832322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n def crear_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     new_user = models.Post(**user.dict())\n-    db.add(nuevo_post)\n+    db.add(new_user)\n     db.commit()\n-    db.refresh(nuevo_post)\n+    db.refresh(new_user)\n     \n     return Response(status_code=status.HTTP_201_CREATED)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1663700863430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,5 +125,5 @@\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n     \n-    return Response(status_code=status.HTTP_201_CREATED)\n\\ No newline at end of file\n+    return new_user\n\\ No newline at end of file\n"
                },
                {
                    "date": 1663700870650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n     db.add(nuevo_post)\n     db.commit()\n     db.refresh(nuevo_post)\n     \n-    return Response(status_code=status.HTTP_201_CREATED)\n+    return nuevo_post\n \n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663702175237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \n \n \n #Ruta creación de user\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\n+@app.post(\"/users\", status_code=status.HTTP_201_CREATED)\n def crear_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n"
                },
                {
                    "date": 1663702230864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,10 +118,9 @@\n \n \n #Ruta creación de user\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED)\n-def crear_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    \n+def create_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663702235989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n \n \n #Ruta creación de user\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED)\n-def create_post(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663702263184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n from typing import Optional, List\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n-from fastapi.params import Body\n-from pydantic import BaseModel\n from random import randrange\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n"
                },
                {
                    "date": 1663702426105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n \n \n \n #Ruta creación de user\n-@app.post(\"/users\", status_code=status.HTTP_201_CREATED)\n+@app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n"
                },
                {
                    "date": 1663702503224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n-def crear_post(post: schemas.PostCrear, db: Session = Depends(get_db)):\n+def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n     nuevo_post = models.Post(**post.dict())\n     db.add(nuevo_post)\n     db.commit()\n"
                },
                {
                    "date": 1663702653457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,19 @@\n from typing import Optional, List\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n+from fastapi.params import Body\n+from pydantic import BaseModel\n+from passlib.context import CryptContext\n from random import randrange\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n+models.Base.metadata.create_all(bind-engine)\n+app FastAPI()\n     \n \n while True:\n \n"
                },
                {
                    "date": 1663702661968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,12 @@\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n+\n models.Base.metadata.create_all(bind-engine)\n-app FastAPI()\n+\n+app = FastAPI()\n     \n \n while True:\n \n"
                },
                {
                    "date": 1663702729759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n \n-models.Base.metadata.create_all(bind-engine)\n+models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n     \n \n"
                },
                {
                    "date": 1663702793700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n \n+pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecrated=auto)\n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n     \n"
                },
                {
                    "date": 1663702913293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n \n-pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecrated=auto)\n+pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecrated=\"auto\")\n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n     \n"
                },
                {
                    "date": 1663702925005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n \n-pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecrated=\"auto\")\n+pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n     \n"
                },
                {
                    "date": 1663702958824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,11 @@\n \n #Ruta creación de user\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    \n+    #Hash password - user.password\n+    \n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663702982686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     #Hash password - user.password\n-    \n+    pwd_context.hash(user.password)\n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663702996336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     #Hash password - user.password\n-    pwd_context.hash(user.password)\n+    hashed_password = pwd_context.hash(user.password)\n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663703006376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     #Hash password - user.password\n     hashed_password = pwd_context.hash(user.password)\n+    user.password = hashed_password\n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663703163218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n from typing import Optional, List\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n from pydantic import BaseModel\n-from passlib.context import CryptContext\n from random import randrange\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n@@ -124,9 +123,9 @@\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     #Hash password - user.password\n     hashed_password = pwd_context.hash(user.password)\n-    user.password = hashed_password\n+    user.password = hashed_password \n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n"
                },
                {
                    "date": 1663703185510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n from sqlalchemy.sql.functions import mode\n from . import models, schemas\n from .database import engine, get_db\n \n-pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n     \n"
                },
                {
                    "date": 1663703221280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from psycopg2.extras import RealDictCursor\n import time\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n-from . import models, schemas\n+from . import models, schemas, utils\n from .database import engine, get_db\n \n models.Base.metadata.create_all(bind=engine)\n \n"
                },
                {
                    "date": 1663703243781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n     #Hash password - user.password\n-    hashed_password = pwd_context.hash(user.password)\n+    hashed_password = utils.hash(user.password)\n     user.password = hashed_password \n     new_user = models.Post(**user.dict())\n     db.add(new_user)\n     db.commit()\n"
                },
                {
                    "date": 1663703360724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n     \n     #Hash password - user.password\n     hashed_password = utils.hash(user.password)\n     user.password = hashed_password \n-    new_user = models.Post(**user.dict())\n+    new_user = models.User(**user.dict())\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n     \n"
                },
                {
                    "date": 1663703543251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,14 +70,14 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n-    nuevo_post = models.Post(**post.dict())\n-    db.add(nuevo_post)\n+    new_post = models.Post(**post.dict())\n+    db.add(new_post)\n     db.commit()\n-    db.refresh(nuevo_post)\n+    db.refresh(new_post)\n     \n-    return nuevo_post\n+    return new_post\n \n \n \n #Ruta borrar post por ID\n"
                },
                {
                    "date": 1663703657101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n \n \n #Ruta creación de post\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=List[schemas.Post])\n def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n"
                },
                {
                    "date": 1663704482493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import time\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas, utils\n-from .database import engine, get_db\n+from .database import engine, SessionLocal, get_db\n \n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n"
                },
                {
                    "date": 1663704550258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import time\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas, utils\n-from .database import engine, SessionLocal, get_db\n+from .database import engine, get_db\n \n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n"
                },
                {
                    "date": 1663705148053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=List[schemas.Post])\n-def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n+def create_post(post: schemas.CreatePost, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n"
                },
                {
                    "date": 1663705219257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=List[schemas.Post])\n-def create_post(post: schemas.CreatePost, db: Session = Depends(get_db)):\n+def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n"
                },
                {
                    "date": 1663705280674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,8 @@\n     mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n \n \n-@app.get(\"/sqlalchemy\")\n-def test_posts(db: Session = Depends(get_db)):\n-\n-    posts = db.query(models.Post).all()\n-    return {\"data\": \"successfull\"}\n-\n-\n-\n #Obtener listado de posts\n @app.get(\"/posts\", response_model=List[schemas.Post])\n async def get_posts(db: Session = Depends(get_db)):\n     \n"
                },
                {
                    "date": 1663705453918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=List[schemas.Post])\n def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n-    new_post = models.Post(**post.dict())\n+    new_post = models.Post(post.dict())\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n     \n"
                },
                {
                    "date": 1663705499645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=List[schemas.Post])\n def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n-    new_post = models.Post(post.dict())\n+    new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n     \n"
                },
                {
                    "date": 1663705519542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \n \n \n #Ruta creación de post\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=List[schemas.Post])\n+@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n     new_post = models.Post(**post.dict())\n     db.add(new_post)\n"
                },
                {
                    "date": 1663705882289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,5 +120,15 @@\n     db.add(new_user)\n     db.commit()\n     db.refresh(new_user)\n     \n-    return new_user\n\\ No newline at end of file\n+    return new_user\n+\n+\n+\n+#Rute get user por id\n+@app.get(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n+def get_user(id: int, db: Session = Depends(get_db)):\n+    user = db.query(models.User).filter(models.User.id == id).first()\n+    if not user:\n+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n+                            detail=f\"User with id: {id} does not exist\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1663705892071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,5 +130,8 @@\n def get_user(id: int, db: Session = Depends(get_db)):\n     user = db.query(models.User).filter(models.User.id == id).first()\n     if not user:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n-                            detail=f\"User with id: {id} does not exist\")\n\\ No newline at end of file\n+                            detail=f\"User with id: {id} does not exist\")\n+    \n+    return user\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1663706097007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,11 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n-def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n+def create_post(posts: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n-    new_post = models.Post(**post.dict())\n+    new_post = models.Post(**posts.dict())\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n     \n"
                },
                {
                    "date": 1663706118191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,11 @@\n \n \n #Ruta creación de post\n @app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n-def create_post(posts: schemas.PostCreate, db: Session = Depends(get_db)):\n+def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n     \n-    new_post = models.Post(**posts.dict())\n+    new_post = models.Post(**post.dict())\n     db.add(new_post)\n     db.commit()\n     db.refresh(new_post)\n     \n"
                },
                {
                    "date": 1663707599148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n \n #Rute get user por id\n @app.get(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n-def get_user(id: int, db: Session = Depends(get_db)):\n+def get_user(id: int, db: Session = Depends(get_db), response_model=schemas.UserOut):\n     user = db.query(models.User).filter(models.User.id == id).first()\n     if not user:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"User with id: {id} does not exist\")\n"
                },
                {
                    "date": 1663707656521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n \n \n \n #Rute get user por id\n-@app.get(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n+@app.get(\"/users\")\n def get_user(id: int, db: Session = Depends(get_db), response_model=schemas.UserOut):\n     user = db.query(models.User).filter(models.User.id == id).first()\n     if not user:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n"
                },
                {
                    "date": 1663707731117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n \n \n \n #Rute get user por id\n-@app.get(\"/users\")\n+@app.get(\"/users/{id\")\n def get_user(id: int, db: Session = Depends(get_db), response_model=schemas.UserOut):\n     user = db.query(models.User).filter(models.User.id == id).first()\n     if not user:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n"
                },
                {
                    "date": 1663707767236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,10 +125,10 @@\n \n \n \n #Rute get user por id\n-@app.get(\"/users/{id\")\n-def get_user(id: int, db: Session = Depends(get_db), response_model=schemas.UserOut):\n+@app.get(\"/users/{id}\", response_model=schemas.UserOut)\n+def get_user(id: int, db: Session = Depends(get_db)):\n     user = db.query(models.User).filter(models.User.id == id).first()\n     if not user:\n         raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                             detail=f\"User with id: {id} does not exist\")\n"
                },
                {
                    "date": 1663707855028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,80 +36,9 @@\n     mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n \n \n-#Obtener listado de posts\n-@app.get(\"/posts\", response_model=List[schemas.Post])\n-async def get_posts(db: Session = Depends(get_db)):\n-    \n-    posts= db.query(models.Post).all()\n-    return posts\n \n-\n-\n-#Ruta obtener post por ID\n-@app.get(\"/posts/{id}\", response_model=List[schemas.Post])\n-def get_post(id:int, db: Session = Depends(get_db)):\n-    \n-    post = db.query(models.Post).filter(models.Post.id == id).first()\n-    \n-    if not post:\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n-                            detail=f\"post with id: {id} was not found\")\n-    return post\n-\n-\n-\n-#Ruta creación de post\n-@app.post(\"/posts\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post)\n-def create_post(post: schemas.PostCreate, db: Session = Depends(get_db)):\n-    \n-    new_post = models.Post(**post.dict())\n-    db.add(new_post)\n-    db.commit()\n-    db.refresh(new_post)\n-    \n-    return new_post\n-\n-\n-\n-#Ruta borrar post por ID\n-@app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\n-def borrar_post(id: int, db: Session = Depends(get_db)):\n-    \n-    post = db.query(models.Post).filter(models.Post.id == id)\n-    \n-    if post.first() == None:\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n-                            detail=f\"post with id: {id} does not exist\")\n-    \n-    post.delete(synchronize_session=False)\n-    db.commit()\n-    \n-    return Response(status_code=status.HTTP_204_NOT_CONTENT)\n-\n-\n-\n-#Ruta editar post por ID\n-@app.put(\"/posts/{id}\", response_model=schemas.Post)\n-def editar_post(id: int, editado_post: schemas.Post, db: Session = Depends(get_db)):\n-\n-    post_query = db.query(models.Post).filter(models.Post.id == id)\n-    \n-    post = post_query.first()\n-    \n-    if post == None:\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n-                            detail=f\"post with id: {id} does not exist\")\n-        \n-    post_query.update(editado_post.dict(), synchronize_session=False)\n-    \n-    db.commit()\n-\n-    return {\"data\": post_query.first()}\n-\n-\n-\n #Ruta creación de user\n @app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n     \n"
                },
                {
                    "date": 1663707986776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,33 +34,4 @@\n @app.get(\"/\")\n async def root():\n     mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n-\n-\n-\n-#Ruta creación de user\n-@app.post(\"/users\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    \n-    #Hash password - user.password\n-    hashed_password = utils.hash(user.password)\n-    user.password = hashed_password \n-    new_user = models.User(**user.dict())\n-    db.add(new_user)\n-    db.commit()\n-    db.refresh(new_user)\n-    \n-    return new_user\n-\n-\n-\n-#Rute get user por id\n-@app.get(\"/users/{id}\", response_model=schemas.UserOut)\n-def get_user(id: int, db: Session = Depends(get_db)):\n-    user = db.query(models.User).filter(models.User.id == id).first()\n-    if not user:\n-        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n-                            detail=f\"User with id: {id} does not exist\")\n-    \n-    return user\n-    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1663708008688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,4 +34,8 @@\n @app.get(\"/\")\n async def root():\n     mensaje = f\"Bienvenido, esto es una API que simula una red social realizada con Fast API y Swagger por lo que si va a /docs o /redoc puedes comprobar la documentación.\"\n     return {mensaje}\n+\n+\n+\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1663708242330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n from typing import Optional, List\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n from pydantic import BaseModel\n+\n from random import randrange\n import psycopg2\n from psycopg2.extras import RealDictCursor\n import time\n"
                },
                {
                    "date": 1663708280848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from typing import Optional, List\n+from typing import List\n from fastapi import FastAPI, Response, status, HTTPException, Depends\n from fastapi.params import Body\n from pydantic import BaseModel\n \n"
                },
                {
                    "date": 1663708319969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas, utils\n from .database import engine, get_db\n+from .router import post, user\n \n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n"
                },
                {
                    "date": 1663708339246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas, utils\n from .database import engine, get_db\n-from .router import post, user\n+from .routers import post, user\n \n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n@@ -30,8 +30,10 @@\n         print(\"Connecting from database failed\")\n         print(\"Error: \", error)\n         time.sleep(2)\n         \n+app.include_router      \n+        \n \n #Mensaje de inicio\n @app.get(\"/\")\n async def root():\n"
                },
                {
                    "date": 1663708354064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         print(\"Connecting from database failed\")\n         print(\"Error: \", error)\n         time.sleep(2)\n         \n-app.include_router      \n+app.include_router(post.router, user.router)      \n         \n \n #Mensaje de inicio\n @app.get(\"/\")\n"
                },
                {
                    "date": 1663708884870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         print(\"Connecting from database failed\")\n         print(\"Error: \", error)\n         time.sleep(2)\n         \n-app.include_router(post.router, user.router)      \n+app.include_router(post.router)      \n         \n \n #Mensaje de inicio\n @app.get(\"/\")\n"
                },
                {
                    "date": 1663708890889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         print(\"Error: \", error)\n         time.sleep(2)\n         \n app.include_router(post.router)      \n+app.include_router(user.router)      \n         \n \n #Mensaje de inicio\n @app.get(\"/\")\n"
                },
                {
                    "date": 1663713840438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n         time.sleep(2)\n         \n app.include_router(post.router)      \n app.include_router(user.router)      \n+app.include_router(auth.router)      \n         \n \n #Mensaje de inicio\n @app.get(\"/\")\n"
                },
                {
                    "date": 1663713845881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from sqlalchemy.orm import Session\n from sqlalchemy.sql.functions import mode\n from . import models, schemas, utils\n from .database import engine, get_db\n-from .routers import post, user\n+from .routers import post, user, auth\n \n models.Base.metadata.create_all(bind=engine)\n \n app = FastAPI()\n"
                }
            ],
            "date": 1663341132803,
            "name": "Commit-0",
            "content": "from typing import Optional\r\nfrom xml.dom import registerDOMImplementation\r\nfrom fastapi import FastAPI, Response, status, HTTPException\r\nfrom fastapi.params import Body\r\nfrom pydantic import BaseModel\r\nfrom random import randrange\r\nimport psycopg2\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass Post(BaseModel):\r\n    title: str\r\n    content: str\r\n    published: bool = True\r\n    rating: Optional[int] = None\r\n\r\n\r\ntry: \r\n    conn = psy\r\n\r\nmy_posts = [{\"title\": \"title of post 1\", \"content\": \"content of post 1\", \"id\" : 1}, {\r\n\"title\": \"favorite foods\", \"content\": \"I like pizza\" , \"id\": 2}]\r\n\r\n\r\ndef find_post(id):\r\n    for p in my_posts:\r\n        if p[\"id\"] == id:\r\n            return p\r\n \r\n\r\ndef find_index_post(id):\r\n    for i, p in enumerate(my_posts):\r\n        if p['id'] == id:\r\n            return i\r\n        \r\n\r\n@app.get(\"/\")\r\nasync def root():\r\n    return {\"message\": \"Python API\"}\r\n\r\n\r\n@app.get(\"/posts\")\r\nasync def get_posts():\r\n    return {\"data\": my_posts}\r\n\r\n\r\n@app.post(\"/posts\", status_code=status.HTTP_201_CREATED)\r\ndef create_post(post: Post):\r\n    post_dict = post.dict()\r\n    post_dict['id'] = randrange(0, 10000000)\r\n    my_posts.append(post_dict)\r\n    #print(post.dict())\r\n    return {\"data\": post_dict}\r\n# title str, content str, category, Bool published\r\n\r\n\r\n@app.get(\"/posts/latest\")\r\ndef get_latest_post():\r\n    post = my_posts[len(my_posts)-1]\r\n    return {\"detail\": post}\r\n\r\n\r\n@app.get(\"/posts/{id}\")\r\ndef get_post(id:int, response: Response):\r\n    post = find_post(id)\r\n    if not post: \r\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\r\n                            detail=f\"post with id: {id} was not found\")\r\n    return {\"post_detail\": post}\r\n\r\n\r\n@app.delete(\"/posts/{id}\", status_code=status.HTTP_204_NO_CONTENT)\r\ndef delete_post(id: int):\r\n    # deleting post\r\n    index = find_index_post(id)\r\n    \r\n    if index == None:\r\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                            detail=f\"post with id: {id} does not exist\")\r\n    \r\n    my_posts.pop(index)\r\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\r\n\r\n\r\n@app.put(\"/posts/{id}\")\r\ndef update_post(id: int, post: Post):\r\n    index = find_index_post(id)\r\n    \r\n    if index == None:\r\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \r\n                            detail=f\"post with id: {id} does not exist\")\r\n    \r\n    post_dict = post.dict()\r\n    post_dict['id'] = id\r\n    my_posts[index] = post_dict\r\n    return Response(status_code=status.HTTP_204_NO_CONTENT)\r\n\r\n\r\n\r\n"
        }
    ]
}